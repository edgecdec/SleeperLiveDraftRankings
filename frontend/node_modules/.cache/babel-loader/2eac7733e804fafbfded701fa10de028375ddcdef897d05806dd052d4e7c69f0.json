{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nconst useDraftData = (initialDraftId = null) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [currentDraftId, setCurrentDraftId] = useState(initialDraftId);\n  const fetchDraftData = useCallback(async (draftId = currentDraftId) => {\n    if (!draftId) {\n      setLoading(false);\n      return;\n    }\n    try {\n      // Save current scroll position before fetching\n      const scrollPosition = window.scrollY;\n      setError(null);\n      const params = draftId ? {\n        draft_id: draftId\n      } : {};\n      const response = await axios.get('/api/draft/status', {\n        params\n      });\n      setData(response.data);\n      setLastUpdated(new Date());\n      setLoading(false);\n\n      // Restore scroll position after a brief delay to allow DOM updates\n      setTimeout(() => {\n        window.scrollTo(0, scrollPosition);\n      }, 10);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Failed to fetch draft data');\n      setLoading(false);\n    }\n  }, [currentDraftId]);\n  const refreshData = useCallback(async (draftId = currentDraftId) => {\n    if (!draftId) return;\n\n    // Save current scroll position\n    const scrollPosition = window.scrollY;\n    setRefreshing(true);\n    try {\n      setError(null);\n      const params = draftId ? {\n        draft_id: draftId\n      } : {};\n      const response = await axios.get('/api/draft/refresh', {\n        params\n      });\n      setData(response.data);\n      setLastUpdated(new Date());\n\n      // Restore scroll position after DOM updates\n      setTimeout(() => {\n        window.scrollTo(0, scrollPosition);\n        setRefreshing(false);\n      }, 10);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message || 'Failed to refresh draft data');\n      setRefreshing(false);\n    }\n  }, [currentDraftId]);\n  const setDraftId = useCallback(async draftId => {\n    setCurrentDraftId(draftId);\n    setLoading(true);\n    setData(null);\n\n    // Set the draft ID on the backend\n    try {\n      await axios.post('/api/draft/set', {\n        draft_id: draftId\n      });\n    } catch (err) {\n      console.warn('Failed to set draft ID on backend:', err);\n    }\n\n    // Fetch data for the new draft\n    await fetchDraftData(draftId);\n  }, [fetchDraftData]);\n\n  // Initial fetch\n  useEffect(() => {\n    if (currentDraftId) {\n      fetchDraftData();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchDraftData, currentDraftId]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    if (!currentDraftId) return;\n    const interval = setInterval(() => {\n      if (!loading) {\n        // Use refreshData instead of fetchDraftData for auto-refresh\n        // This preserves scroll position\n        refreshData();\n      }\n    }, 30000); // 30 seconds\n\n    return () => clearInterval(interval);\n  }, [refreshData, loading, currentDraftId]);\n  return {\n    data,\n    loading,\n    refreshing,\n    error,\n    lastUpdated,\n    currentDraftId,\n    setDraftId,\n    refreshData,\n    refetch: fetchDraftData\n  };\n};\n_s(useDraftData, \"PUJ6qcSy2HDZB9R4lVaAT9/yYz0=\");\nexport default useDraftData;","map":{"version":3,"names":["useState","useEffect","useCallback","axios","useDraftData","initialDraftId","_s","data","setData","loading","setLoading","refreshing","setRefreshing","error","setError","lastUpdated","setLastUpdated","currentDraftId","setCurrentDraftId","fetchDraftData","draftId","scrollPosition","window","scrollY","params","draft_id","response","get","Date","setTimeout","scrollTo","err","_err$response","_err$response$data","message","refreshData","_err$response2","_err$response2$data","setDraftId","post","console","warn","interval","setInterval","clearInterval","refetch"],"sources":["/Users/edeclan/FantasyFootballTest/SleeperLiveDraftRankings/frontend/src/hooks/useDraftData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nconst useDraftData = (initialDraftId = null) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [currentDraftId, setCurrentDraftId] = useState(initialDraftId);\n\n  const fetchDraftData = useCallback(async (draftId = currentDraftId) => {\n    if (!draftId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Save current scroll position before fetching\n      const scrollPosition = window.scrollY;\n      \n      setError(null);\n      const params = draftId ? { draft_id: draftId } : {};\n      const response = await axios.get('/api/draft/status', { params });\n      setData(response.data);\n      setLastUpdated(new Date());\n      setLoading(false);\n      \n      // Restore scroll position after a brief delay to allow DOM updates\n      setTimeout(() => {\n        window.scrollTo(0, scrollPosition);\n      }, 10);\n      \n    } catch (err) {\n      setError(err.response?.data?.error || err.message || 'Failed to fetch draft data');\n      setLoading(false);\n    }\n  }, [currentDraftId]);\n\n  const refreshData = useCallback(async (draftId = currentDraftId) => {\n    if (!draftId) return;\n\n    // Save current scroll position\n    const scrollPosition = window.scrollY;\n    setRefreshing(true);\n\n    try {\n      setError(null);\n      const params = draftId ? { draft_id: draftId } : {};\n      const response = await axios.get('/api/draft/refresh', { params });\n      setData(response.data);\n      setLastUpdated(new Date());\n      \n      // Restore scroll position after DOM updates\n      setTimeout(() => {\n        window.scrollTo(0, scrollPosition);\n        setRefreshing(false);\n      }, 10);\n      \n    } catch (err) {\n      setError(err.response?.data?.error || err.message || 'Failed to refresh draft data');\n      setRefreshing(false);\n    }\n  }, [currentDraftId]);\n\n  const setDraftId = useCallback(async (draftId) => {\n    setCurrentDraftId(draftId);\n    setLoading(true);\n    setData(null);\n    \n    // Set the draft ID on the backend\n    try {\n      await axios.post('/api/draft/set', { draft_id: draftId });\n    } catch (err) {\n      console.warn('Failed to set draft ID on backend:', err);\n    }\n    \n    // Fetch data for the new draft\n    await fetchDraftData(draftId);\n  }, [fetchDraftData]);\n\n  // Initial fetch\n  useEffect(() => {\n    if (currentDraftId) {\n      fetchDraftData();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchDraftData, currentDraftId]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    if (!currentDraftId) return;\n\n    const interval = setInterval(() => {\n      if (!loading) {\n        // Use refreshData instead of fetchDraftData for auto-refresh\n        // This preserves scroll position\n        refreshData();\n      }\n    }, 30000); // 30 seconds\n\n    return () => clearInterval(interval);\n  }, [refreshData, loading, currentDraftId]);\n\n  return {\n    data,\n    loading,\n    refreshing,\n    error,\n    lastUpdated,\n    currentDraftId,\n    setDraftId,\n    refreshData,\n    refetch: fetchDraftData\n  };\n};\n\nexport default useDraftData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAACC,cAAc,GAAG,IAAI,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAACK,cAAc,CAAC;EAEpE,MAAMc,cAAc,GAAGjB,WAAW,CAAC,OAAOkB,OAAO,GAAGH,cAAc,KAAK;IACrE,IAAI,CAACG,OAAO,EAAE;MACZV,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF;MACA,MAAMW,cAAc,GAAGC,MAAM,CAACC,OAAO;MAErCT,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMU,MAAM,GAAGJ,OAAO,GAAG;QAAEK,QAAQ,EAAEL;MAAQ,CAAC,GAAG,CAAC,CAAC;MACnD,MAAMM,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,mBAAmB,EAAE;QAAEH;MAAO,CAAC,CAAC;MACjEhB,OAAO,CAACkB,QAAQ,CAACnB,IAAI,CAAC;MACtBS,cAAc,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;MAC1BlB,UAAU,CAAC,KAAK,CAAC;;MAEjB;MACAmB,UAAU,CAAC,MAAM;QACfP,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAET,cAAc,CAAC;MACpC,CAAC,EAAE,EAAE,CAAC;IAER,CAAC,CAAC,OAAOU,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZnB,QAAQ,CAAC,EAAAkB,aAAA,GAAAD,GAAG,CAACL,QAAQ,cAAAM,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAczB,IAAI,cAAA0B,kBAAA,uBAAlBA,kBAAA,CAAoBpB,KAAK,KAAIkB,GAAG,CAACG,OAAO,IAAI,4BAA4B,CAAC;MAClFxB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACO,cAAc,CAAC,CAAC;EAEpB,MAAMkB,WAAW,GAAGjC,WAAW,CAAC,OAAOkB,OAAO,GAAGH,cAAc,KAAK;IAClE,IAAI,CAACG,OAAO,EAAE;;IAEd;IACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO;IACrCX,aAAa,CAAC,IAAI,CAAC;IAEnB,IAAI;MACFE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMU,MAAM,GAAGJ,OAAO,GAAG;QAAEK,QAAQ,EAAEL;MAAQ,CAAC,GAAG,CAAC,CAAC;MACnD,MAAMM,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,oBAAoB,EAAE;QAAEH;MAAO,CAAC,CAAC;MAClEhB,OAAO,CAACkB,QAAQ,CAACnB,IAAI,CAAC;MACtBS,cAAc,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;;MAE1B;MACAC,UAAU,CAAC,MAAM;QACfP,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAET,cAAc,CAAC;QAClCT,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,EAAE,EAAE,CAAC;IAER,CAAC,CAAC,OAAOmB,GAAG,EAAE;MAAA,IAAAK,cAAA,EAAAC,mBAAA;MACZvB,QAAQ,CAAC,EAAAsB,cAAA,GAAAL,GAAG,CAACL,QAAQ,cAAAU,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc7B,IAAI,cAAA8B,mBAAA,uBAAlBA,mBAAA,CAAoBxB,KAAK,KAAIkB,GAAG,CAACG,OAAO,IAAI,8BAA8B,CAAC;MACpFtB,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACK,cAAc,CAAC,CAAC;EAEpB,MAAMqB,UAAU,GAAGpC,WAAW,CAAC,MAAOkB,OAAO,IAAK;IAChDF,iBAAiB,CAACE,OAAO,CAAC;IAC1BV,UAAU,CAAC,IAAI,CAAC;IAChBF,OAAO,CAAC,IAAI,CAAC;;IAEb;IACA,IAAI;MACF,MAAML,KAAK,CAACoC,IAAI,CAAC,gBAAgB,EAAE;QAAEd,QAAQ,EAAEL;MAAQ,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZS,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAEV,GAAG,CAAC;IACzD;;IAEA;IACA,MAAMZ,cAAc,CAACC,OAAO,CAAC;EAC/B,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;;EAEpB;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIgB,cAAc,EAAE;MAClBE,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACLT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACS,cAAc,EAAEF,cAAc,CAAC,CAAC;;EAEpC;EACAhB,SAAS,CAAC,MAAM;IACd,IAAI,CAACgB,cAAc,EAAE;IAErB,MAAMyB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAI,CAAClC,OAAO,EAAE;QACZ;QACA;QACA0B,WAAW,CAAC,CAAC;MACf;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMS,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACP,WAAW,EAAE1B,OAAO,EAAEQ,cAAc,CAAC,CAAC;EAE1C,OAAO;IACLV,IAAI;IACJE,OAAO;IACPE,UAAU;IACVE,KAAK;IACLE,WAAW;IACXE,cAAc;IACdqB,UAAU;IACVH,WAAW;IACXU,OAAO,EAAE1B;EACX,CAAC;AACH,CAAC;AAACb,EAAA,CAjHIF,YAAY;AAmHlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}