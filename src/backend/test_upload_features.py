#!/usr/bin/env python3\n\"\"\"\nTest Script for Upload Features\n\nThis script tests the new upload and mock draft functionality.\n\"\"\"\n\nimport requests\nimport json\nimport os\nimport tempfile\nimport csv\nfrom datetime import datetime\n\n# Configuration\nBASE_URL = \"http://localhost:5001\"\nTEST_CSV_DATA = [\n    [\"name\", \"position\", \"rank\", \"tier\", \"team\"],\n    [\"Josh Allen\", \"QB\", \"1\", \"1\", \"BUF\"],\n    [\"Christian McCaffrey\", \"RB\", \"2\", \"1\", \"SF\"],\n    [\"Cooper Kupp\", \"WR\", \"3\", \"1\", \"LAR\"],\n    [\"Travis Kelce\", \"TE\", \"4\", \"1\", \"KC\"],\n    [\"Justin Tucker\", \"K\", \"5\", \"2\", \"BAL\"],\n    [\"Buffalo Bills\", \"DST\", \"6\", \"2\", \"BUF\"],\n    [\"Lamar Jackson\", \"QB\", \"7\", \"1\", \"BAL\"],\n    [\"Derrick Henry\", \"RB\", \"8\", \"1\", \"TEN\"],\n    [\"Davante Adams\", \"WR\", \"9\", \"1\", \"LV\"],\n    [\"Mark Andrews\", \"TE\", \"10\", \"1\", \"BAL\"]\n]\n\ndef create_test_csv():\n    \"\"\"Create a temporary CSV file for testing\"\"\"\n    temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False)\n    writer = csv.writer(temp_file)\n    writer.writerows(TEST_CSV_DATA)\n    temp_file.close()\n    return temp_file.name\n\ndef test_health_check():\n    \"\"\"Test if the server is running\"\"\"\n    print(\"🏥 Testing health check...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\", timeout=5)\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Server is healthy: {data.get('message')}\")\n            return True\n        else:\n            print(f\"❌ Health check failed: {response.status_code}\")\n            return False\n    except requests.exceptions.RequestException as e:\n        print(f\"❌ Cannot connect to server: {e}\")\n        return False\n\ndef test_custom_rankings_upload():\n    \"\"\"Test custom rankings upload\"\"\"\n    print(\"\\n📁 Testing custom rankings upload...\")\n    \n    # Create test CSV\n    csv_file = create_test_csv()\n    \n    try:\n        with open(csv_file, 'rb') as f:\n            files = {'file': ('test_rankings.csv', f, 'text/csv')}\n            data = {\n                'display_name': 'Test Rankings 2025',\n                'description': 'Test rankings created by automated test',\n                'scoring_format': 'half_ppr',\n                'league_type': 'standard'\n            }\n            \n            response = requests.post(\n                f\"{BASE_URL}/api/rankings/upload\",\n                files=files,\n                data=data,\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                if result.get('success'):\n                    print(f\"✅ Upload successful: {result['data']['display_name']}\")\n                    print(f\"   File ID: {result['data']['file_id']}\")\n                    print(f\"   Players: {result['data']['player_count']}\")\n                    return result['data']['file_id']\n                else:\n                    print(f\"❌ Upload failed: {result.get('message')}\")\n            else:\n                print(f\"❌ Upload request failed: {response.status_code}\")\n                print(f\"   Response: {response.text}\")\n                \n    except Exception as e:\n        print(f\"❌ Upload error: {e}\")\n    finally:\n        # Clean up temp file\n        if os.path.exists(csv_file):\n            os.unlink(csv_file)\n    \n    return None\n\ndef test_get_custom_rankings():\n    \"\"\"Test getting custom rankings list\"\"\"\n    print(\"\\n📋 Testing get custom rankings...\")\n    \n    try:\n        response = requests.get(f\"{BASE_URL}/api/rankings/custom\", timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                rankings = result.get('custom_rankings', [])\n                print(f\"✅ Found {len(rankings)} custom rankings\")\n                \n                for ranking in rankings:\n                    print(f\"   - {ranking['display_name']} ({ranking['player_count']} players)\")\n                \n                return rankings\n            else:\n                print(f\"❌ Failed to get rankings: {result.get('message')}\")\n        else:\n            print(f\"❌ Request failed: {response.status_code}\")\n            \n    except Exception as e:\n        print(f\"❌ Error getting custom rankings: {e}\")\n    \n    return []\n\ndef test_mock_draft_config():\n    \"\"\"Test mock draft configuration\"\"\"\n    print(\"\\n🎯 Testing mock draft configuration...\")\n    \n    # Test getting current config\n    try:\n        response = requests.get(f\"{BASE_URL}/api/mock-draft/config\", timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            print(f\"✅ Current config retrieved: {result.get('success')}\")\n            current_config = result.get('config', {})\n            \n            if current_config:\n                print(f\"   Draft ID: {current_config.get('draft_id', 'None')}\")\n                print(f\"   Active: {current_config.get('is_active', False)}\")\n        else:\n            print(f\"❌ Failed to get config: {response.status_code}\")\n            \n    except Exception as e:\n        print(f\"❌ Error getting config: {e}\")\n    \n    # Test setting config (with a fake draft ID)\n    test_draft_id = \"123456789\"\n    config_data = {\n        'draft_id': test_draft_id,\n        'description': 'Test Mock Draft Configuration',\n        'auto_refresh': True,\n        'refresh_interval': 30,\n        'validate_draft': False  # Skip validation for test\n    }\n    \n    try:\n        response = requests.post(\n            f\"{BASE_URL}/api/mock-draft/config\",\n            json=config_data,\n            headers={'Content-Type': 'application/json'},\n            timeout=15\n        )\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                print(f\"✅ Mock draft config saved successfully\")\n                print(f\"   Draft ID: {result['config']['draft_id']}\")\n                print(f\"   Description: {result['config']['description']}\")\n                return True\n            else:\n                print(f\"❌ Failed to save config: {result.get('message')}\")\n        else:\n            print(f\"❌ Config save failed: {response.status_code}\")\n            print(f\"   Response: {response.text}\")\n            \n    except Exception as e:\n        print(f\"❌ Error saving config: {e}\")\n    \n    return False\n\ndef test_mock_draft_status():\n    \"\"\"Test mock draft status endpoint\"\"\"\n    print(\"\\n📊 Testing mock draft status...\")\n    \n    try:\n        response = requests.get(f\"{BASE_URL}/api/mock-draft/status\", timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                print(f\"✅ Status retrieved successfully\")\n                print(f\"   Configured: {result.get('is_configured', False)}\")\n                \n                if result.get('is_configured'):\n                    config = result.get('config', {})\n                    print(f\"   Draft ID: {config.get('draft_id')}\")\n                    print(f\"   Auto Refresh: {config.get('auto_refresh')}\")\n                    \n                    # Note: draft_info will likely be None since we're using a fake ID\n                    if result.get('draft_info'):\n                        print(f\"   Draft Status: {result.get('draft_status')}\")\n                    else:\n                        print(f\"   Draft Info: Not available (expected for test ID)\")\n                \n                return True\n            else:\n                print(f\"❌ Failed to get status: {result.get('message')}\")\n        else:\n            print(f\"❌ Status request failed: {response.status_code}\")\n            \n    except Exception as e:\n        print(f\"❌ Error getting status: {e}\")\n    \n    return False\n\ndef test_delete_custom_rankings(file_id):\n    \"\"\"Test deleting custom rankings\"\"\"\n    if not file_id:\n        print(\"\\n⚠️  Skipping delete test - no file ID provided\")\n        return\n    \n    print(f\"\\n🗑️  Testing delete custom rankings: {file_id}\")\n    \n    try:\n        response = requests.delete(f\"{BASE_URL}/api/rankings/custom/{file_id}\", timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                print(f\"✅ Delete successful: {result.get('message')}\")\n                return True\n            else:\n                print(f\"❌ Delete failed: {result.get('message')}\")\n        else:\n            print(f\"❌ Delete request failed: {response.status_code}\")\n            \n    except Exception as e:\n        print(f\"❌ Error deleting rankings: {e}\")\n    \n    return False\n\ndef test_clear_mock_draft_config():\n    \"\"\"Test clearing mock draft configuration\"\"\"\n    print(\"\\n🗑️  Testing clear mock draft config...\")\n    \n    try:\n        response = requests.delete(f\"{BASE_URL}/api/mock-draft/config\", timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                print(f\"✅ Config cleared: {result.get('message')}\")\n                return True\n            else:\n                print(f\"❌ Clear failed: {result.get('message')}\")\n        else:\n            print(f\"❌ Clear request failed: {response.status_code}\")\n            \n    except Exception as e:\n        print(f\"❌ Error clearing config: {e}\")\n    \n    return False\n\ndef main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🧪 Starting Upload Features Test Suite\")\n    print(\"=\" * 50)\n    \n    # Test server health\n    if not test_health_check():\n        print(\"\\n❌ Server is not running. Please start the backend server first.\")\n        print(\"   Run: python app.py\")\n        return\n    \n    # Test custom rankings upload\n    uploaded_file_id = test_custom_rankings_upload()\n    \n    # Test getting custom rankings\n    custom_rankings = test_get_custom_rankings()\n    \n    # Test mock draft configuration\n    mock_config_saved = test_mock_draft_config()\n    \n    # Test mock draft status\n    if mock_config_saved:\n        test_mock_draft_status()\n    \n    # Clean up: delete uploaded rankings\n    if uploaded_file_id:\n        test_delete_custom_rankings(uploaded_file_id)\n    \n    # Clean up: clear mock draft config\n    if mock_config_saved:\n        test_clear_mock_draft_config()\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🎉 Test suite completed!\")\n    print(\"\\n📝 Summary:\")\n    print(\"   - Custom rankings upload: Implemented\")\n    print(\"   - Custom rankings management: Implemented\")\n    print(\"   - Mock draft configuration: Implemented\")\n    print(\"   - Mock draft status tracking: Implemented\")\n    print(\"\\n🚀 Your system now supports:\")\n    print(\"   1. Uploading custom CSV rankings files\")\n    print(\"   2. Managing uploaded rankings (view, delete)\")\n    print(\"   3. Connecting to Sleeper mock drafts by ID\")\n    print(\"   4. Real-time mock draft status monitoring\")\n\nif __name__ == \"__main__\":\n    main()